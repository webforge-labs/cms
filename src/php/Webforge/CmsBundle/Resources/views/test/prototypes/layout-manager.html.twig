{% extends "WebforgeCmsBundle:test:prototype.html.twig" %}

{% block body %}
  <style type="text/css">
ul {
    border: 1px solid grey;
    padding: 0;
    margin: 0;
    -webkit-user-select: none;
    -moz-user-select: -moz-none;
    -ms-user-select: none;
    -o-user-select: none;
    user-select: none;
    min-height: 50px;
}
ul.source {
    right: 51%;
}
ul.target {
    left: 51%;
}
ul.drag-over {
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(0, 0, 0, 0.8);
    -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(0, 0, 0, 0.8);
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(0, 0, 0, 0.8);

    background-color: #F4FFDD;
    -moz-transition: all 300ms, -moz-transform;
    -webkit-transition: all 300ms, -webkit-transform;
    -o-transition: all 300ms, -o-transform;
    transition: all 300ms, transform;
}

ul.drop-rejected {
    -webkit-box-shadow: inset 0 1px 1px rgba(255, 0, 0, 0.075), 0 0 8px rgba(255, 0, 0, 0.8);
    -moz-box-shadow: inset 0 1px 1px rgba(255, 0, 0, 0.075), 0 0 8px rgba(255, 0, 0, 0.8);
    box-shadow: inset 0 1px 1px rgba(255, 0, 0, 0.075), 0 0 8px rgba(255, 0, 0, 0.8);

    -moz-transition: all 300ms, -moz-transform;
    -webkit-transition: all 300ms, -webkit-transform;
    -o-transition: all 300ms, -o-transform;
    transition: all 300ms, transform;
    border: 1px solid red;
}
li {
    position: relative;
    margin: 0;
    margin-top: 1px;
    list-style-type: none;
    padding: 8px 16px;

    background: #caea85; /* Old browsers */
    background: -moz-linear-gradient(top, #caea85 0%, #a0c645 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#caea85), color-stop(100%,#a0c645)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, #caea85 0%,#a0c645 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, #caea85 0%,#a0c645 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top, #caea85 0%,#a0c645 100%); /* IE10+ */
    background: linear-gradient(to bottom, #caea85 0%,#a0c645 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#caea85', endColorstr='#a0c645',GradientType=0 ); /* IE6-9 */
}
li:first-child {
    margin-top: 0;
}
li .label {
    margin-left: 6px;
}
.drag-handle {
    position: absolute;
    top: 0px;
    bottom: 0px;
    left: 0px;
    width: 20px;
    margin: 6px 0px;
    background-image: url("images/drag-handle.png");
    background-repeat: repeat-y;
    background-position: center center;
    cursor: move;
    z-index: 1;
}
.customDragElement {
    background-color: white;
    border: thin solid gray;
    padding: 6px 12px;
}
.dragging {
  opacity: 0.5;
  filter: "alpha(opacity=50)";
}

.scroll-while-dragging .zones {
    height: 150px;
    overflow: auto;
}

.scroll-while-dragging .zones {
    border: 1px solid grey;
}
.scroll-while-dragging .zones ul {
    border: none;
    box-sizing: border-box;
    width: 133%;
}
.scroll-while-dragging .zones ul li {
    box-sizing: border-box;
    width: 19.5%;
    height: 250px;
    display: inline-block;
}

.drag-zones .zones {
    height: 300px;
}
.drag-zones ul.source.vowels {
    height: 72px;
}
.drag-zones ul.source.consonants {
    top: auto;
    bottom: 0;
    height: 221px;
}  </style>

  <h2>LayoutManager test</h2>

  <div class="container-fluid">
    <div class="row">
      <div class="col-xs-7">
        <h2>Drop here</h2>
        <ul data-bind="foreach: target, dropZone: { accepts: 'sortable', drop: drop }">
            <li data-bind="
            html: $data.html,
            dragZone: {
              name: 'sortable',
              dragStart: $parent.targetDragStart,
            },
            dragEvents: {
              accepts: 'sortable',
              dragOver: $parent.reorder,
              data: { items: $parent.target, item: $data }
            }"></li>
        </ul>

      </div>
      <div class="col-xs-5">
        <h2>Drag from here</h2>
        <ul data-bind="foreach: source">
            <li data-bind="
            text: $data.label,
            dragZone: {
              name: 'sortable',
              dragStart: $parent.sourceDragStart,
              dragEnd: $parent.dragEnd,
              data: { item: $data }
            }"></li>
        </ul>
      </div>
    </div>
  </div>
{% endblock %}

{% block requirejs %}
 <script type="text/javascript">
   require(['knockout', 'jquery', 'knockout-dragdrop'], function(ko, $) {
     var Draggable = function(label, data) {
       var that = this;

       this.componentView = ko.observable(false);
       this.label = ko.observable(label);

       this.html = ko.computed(function() {
         if (that.componentView()) {
           return '<span class="drag-handle fa fa-2x fa-arrows"> </span><input type="text" value="" /> '+that.label();
         } else {
           return that.label();
         }
       });
     };

     var model = {
        source: ko.observableArray([
            new Draggable('Declan', { inSource: true }),
            new Draggable('Tessa', { inSource: true }),
            new Draggable('Claire', { inSource: true }),
            new Draggable('Violet', { inSource: true }),
            new Draggable('Alice', { inSource: true }),
            new Draggable('Mia', { inSource: true }),
            new Draggable('Camille', { inSource: true }),
            new Draggable('Aiden', { inSource: true })
        ]),
        target: ko.observableArray([new Draggable('xx')]),
        drop: function (dragData, model) {

          if (!model.target().length) {
            var dragItem = new Draggable(dragData.item.label());
            dragItem.componentView(true);

            console.log('adding to empty target: ',dragItem);
            model.target.push(dragItem);
          }
        },
        sourceDragStart: function (dragData) {
          dragData.fromSource = true;
          dragData.added = false;
          dragData.item.componentView(true);
        },
        targetDragStart: function (dragItem, event) {
          if (!$(event.target).is('.drag-handle')) {
            return false;
          }

          dragItem.fromSource = false;
          dragItem.componentView(true);

          return true;
        },
        dragEnd: function (item) {
          //item.dragging(false);
        },
        reorder: function (event, dragData, zoneData) {
          // sorting started with an element from source
          if (dragData.fromSource) {
            if (!dragData.added) {
              var sortItem = new Draggable(dragData.item.label());
              sortItem.componentView(true);

              // store ref to the item that should be reordered
              dragData.item = sortItem;
              dragData.added = true;
            }

            // reorder the element represented by the dragger in the elements of the target
            var zoneDataIndex = zoneData.items.indexOf(zoneData.item);
            zoneData.items.remove(dragData.item);
            zoneData.items.splice(zoneDataIndex, 0, dragData.item);
          } else {

            // internal sorting started with an element from target
            // in this case dragData is the options.data from dragZone-binding in target
            if (zoneData.item !== dragData) {
              var zoneDataIndex = zoneData.items.indexOf(zoneData.item);
              
              zoneData.items.remove(dragData);
              zoneData.items.splice(zoneDataIndex, 0, dragData);
            }
          }
        }
      };

    ko.applyBindings(model);
   }); 
 </script>
{% endblock %}